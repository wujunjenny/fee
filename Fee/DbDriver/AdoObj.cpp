// SqlObj.cpp: implementation of the CSqlObj class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
//#include "smcapp.h"
#include "AdoObj.h"
#include "datasource.h"
#include "DataConeMng.h"
#include "eventlog.h"
#include "GlobalDef.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif


//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

//#define SQL_SERVER_CONN_STRING  "driver={SQL Server};Server=%s;DATABASE=%s;UID=%s;PWD=%s"
//#define SQL_SERVER_CONN_STRING  "Provider=SQLOLEDB.1;Data Source=%s;Initial Catalog=%s;User Id=%s;Password=%s;"
#define SQL_SERVER_CONN_STRING  "driver={SQL Server};Server=%s;DATABASE=%s;UID=%s;PWD=%s"
#define ORACLE_CONN_STRING "Provider=OraOLEDB.Oracle;User ID=%s;Password=%s;Data Source=%s;PLSQLRSet=1;"


CAdoObj::CAdoObj(CDataSource* father)
{
	ASSERT(father);
	m_pFather = father ;
	m_DataSrc = m_pFather->GetDataSrc(); 
	
    switch(m_pFather->GetProvider())
    {
    case ADO_ORACLE:
		m_ConnectStr.Format(ORACLE_CONN_STRING,
			m_pFather->GetUserID(),
			m_pFather->GetPassword(),
			m_pFather->GetServerName());
        break;
    case ADO_SQL_SERVER:
    default:
		m_ConnectStr.Format(SQL_SERVER_CONN_STRING,
			m_pFather->GetServerName(), 
			m_pFather->GetDBName(), 
			m_pFather->GetUserID(),
			m_pFather->GetPassword());
        break;
    }
	
	m_iDbExecTimeOutSec = DBLOGIN_TIMEOUT;//LoadDbExecTimeOutSet();
	//end add
	m_IsConnectionOpen = FALSE; 
	
	   m_pConnection = NULL;
       
       //m_pConnection.CreateInstance("ADODB.Connection");
       
	   //CreateLink();
}

CAdoObj::~CAdoObj()
{
	DestroyLink();
}

BOOL CAdoObj::IsLinkOk()
{
	if (m_IsConnectionOpen && 
		m_pConnection != NULL && m_pConnection->State == 1)
	{
		//打开状态
		return TRUE;
	}
	
	return FALSE;
}

void CAdoObj::DestroyLink()
{
	m_IsConnectionOpen = FALSE;
	// SMGW41-60, 2005-06-13, wzy modify begin //
	if (m_pConnection != NULL && m_pConnection->State == 1)
	{
		//如果已经打开了连接则关闭它
		m_pConnection->Close();
		m_pConnection = NULL;
    }
	// SMGW41-60, 2005-06-13, wzy modify end //
}

BOOL CAdoObj::CreateLink()
{
	
	m_IsConnectionOpen = FALSE;  
	if(m_pConnection == NULL)
	{
		m_pConnection.CreateInstance("ADODB.Connection");
	}
	
    HRESULT hr;
    try
    {
        //hr = m_pConnection.CreateInstance("ADODB.Connection");
        //if (SUCCEEDED(hr))
        {
            m_pConnection->PutConnectionTimeout( m_iDbExecTimeOutSec);
            hr = m_pConnection->Open(
				_bstr_t(m_ConnectStr) ,
				_bstr_t(L""),
				_bstr_t(L""),
				adModeUnknown);
            if (SUCCEEDED(hr))
            {
                m_IsConnectionOpen = TRUE;
				TRACE("000");
				g_nConnDBTimeOutCount = 0;
                return TRUE;
            }
        }
    }
    catch( _com_error &e )
    {
		//return FALSE;
		//HRESULT hr=e.Error();


		//if(hr==E_FAIL)
		//{
		//	return FALSE;
		//}

  //      //Get info from _com_error
  //      _bstr_t bstrSource(e.Source());
  //      _bstr_t bstrDescription(e.Description());
  //      //m_szDataBaseInfo = LPCTSTR(bstrDescription);
  //      TRACE("cccException thrown for classes generated by #import");
  //      TRACE("\tCode = %081x\n", e.Error());
  //      TRACE("\tcode meaning = %s\n", e.ErrorMessage());        
  //      TRACE("\tSource = %s\n", (LPCTSTR)bstrSource);
  //      TRACE("\tDescription = %s\n", (LPCTSTR)bstrDescription);
  //      if((LPCTSTR)bstrDescription)
		//	WriteEventLog(0, EVENTLOG_INFORMATION_TYPE, "ConnectDB", "Prmt", (LPCTSTR)bstrDescription);
		//
		//g_nConnDBTimeOutCount ++;
		//TRACE("++++++");
		
    }
    catch(...)
    {
        TRACE("*** unhandled Exception ***");
    }
	
	return FALSE;
	
}
